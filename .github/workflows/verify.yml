name: Verify

on:
  workflow_dispatch:
    inputs:
      git_source:
        description: "VCS source name. For example [wip, dev...]."
        required: true
        default: "wip"

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Set up repository
        env:
          REPOSITORY_OWNER: ${{github.event.repository.owner.login}}
          REPOSITORY_NAME: ${{github.event.repository.name}}
        run: |
          mkdir -p workdir/repository
          git -C workdir/repository init
          git -C workdir/repository \
           remote add origin "https://github.com/${REPOSITORY_OWNER}/${REPOSITORY_NAME}.git"
          git -C workdir/repository fetch origin "${{github.event.pull_request.head.ref}}"
          git -C workdir/repository checkout FETCH_HEAD
          mkdir workdir/ex
          cp -r workdir/repository/ex/util workdir/ex/
          IMAGE_NAME="${REPOSITORY_OWNER}.${REPOSITORY_NAME}.verify"
          echo "IMAGE_NAME=${IMAGE_NAME,,}" >> $GITHUB_ENV
      - name: Build image
        working-directory: workdir
        env:
          REPOSITORY_OWNER: ${{github.event.repository.owner.login}}
          REPOSITORY_NAME: ${{github.event.repository.name}}
        run: |
          . ex/util/json --base64 "${{secrets.VCS_TOKENS}}" -sfs .github.continuousi VCS_PAT
          . ex/util/json --base64 "${{secrets.TELEGRAM}}" \
           -si .bot.continuousibot.id TELEGRAM_BOT_ID \
           -sfs .bot.continuousibot.token TELEGRAM_BOT_TOKEN \
           -si .chat.kepocnhh.id TELEGRAM_CHAT_ID
          docker build --no-cache \
           --build-arg="REPOSITORY_OWNER=$REPOSITORY_OWNER" \
           --build-arg="REPOSITORY_NAME=$REPOSITORY_NAME" \
           --build-arg="GIT_BRANCH_SRC=${{github.event.inputs.git_source}}" \
           --build-arg="VCS_PAT=$VCS_PAT" \
           --build-arg="TELEGRAM_BOT_ID=$TELEGRAM_BOT_ID" \
           --build-arg="TELEGRAM_BOT_TOKEN=$TELEGRAM_BOT_TOKEN" \
           --build-arg="TELEGRAM_CHAT_ID=$TELEGRAM_CHAT_ID" \
           -f='repository/internal/docker/workflow/verify/Dockerfile' \
           -t="${IMAGE_NAME}:${GITHUB_RUN_ID}" .
      - name: Run container
        working-directory: workdir
        run: docker run --rm --privileged --name="container.${IMAGE_NAME}" "${IMAGE_NAME}:${GITHUB_RUN_ID}"
