#!/bin/bash

if test $# -lt 3; then
 echo "Script needs more arguments, but actual is $#!"; exit 11
fi

JSON_SOURCE_OPTION="$1"
JSON_SOURCE="$2"

case "$JSON_SOURCE_OPTION" in
 -v | --variable)
  if test -z "$JSON_SOURCE"; then
   echo "Source is empty!"; exit 121
  fi;;
 -f | --file)
  if [ ! -f "$JSON_SOURCE" ]; then
   echo "File \"$JSON_SOURCE\" does not exist!"; exit 122
  elif [ ! -s "$JSON_SOURCE" ]; then
   echo "File \"$JSON_SOURCE\" is empty!"; exit 123
  fi;;
 *) echo "Source option \"$JSON_SOURCE_OPTION\" is not supported!"; exit 13;;
esac

JSON_MERGE_CODE=0
for ((JSON_QUERY_INDEX=3; JSON_QUERY_INDEX<=$#; JSON_QUERY_INDEX++)); do
 JSON_QUERY="${!JSON_QUERY_INDEX}"
 if test -z "$JSON_QUERY"; then
  echo "Json merge variable is empty!"; exit $((210 + JSON_QUERY_INDEX)); fi
 case "$JSON_SOURCE_OPTION" in
  -v | --variable)
   JSON_MERGE_RESULT="$(echo "${!JSON_SOURCE}" | jq -Mc "$JSON_QUERY")"
   JSON_MERGE_CODE=$?;;
  -f | --file)
   JSON_MERGE_RESULT="$(cat "$JSON_SOURCE" | jq -Mc "$JSON_QUERY")"
   JSON_MERGE_CODE=$?;;
  *) echo "Source option \"$JSON_SOURCE_OPTION\" is not supported!"; exit 22;;
 esac
 if test $JSON_MERGE_CODE -ne 0; then
  echo "Json merge [$(($JSON_QUERY_INDEX - 1))/$(($# - 1))] \"$JSON_MERGE_VARIABLE\" error!";
  exit $((220 + JSON_QUERY_INDEX))
 fi
 case "$JSON_SOURCE_OPTION" in
  -v | --variable)
   printf -v "$JSON_MERGE_VARIABLE" '%s' "$JSON_MERGE_RESULT";;
  -f | --file)
   echo "$JSON_MERGE_RESULT" > "$JSON_SOURCE" || exit 1;;
  *) echo "Source option \"$JSON_SOURCE_OPTION\" is not supported!"; exit 23;;
 esac
done
