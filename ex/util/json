#!/bin/bash

if test $# -lt 5; then
 echo "Script needs more arguments, but actual is $#!"; exit 11
elif test $(($(($# - 2)) % 3)) -ne 0; then
 echo "Arguments error!"; exit 12
fi

JSON_SOURCE_OPTION="$1"
JSON_SOURCE="$2"

case "$JSON_SOURCE_OPTION" in
 -j | --json)
  if test -z "$JSON_SOURCE"; then
   echo "Source is empty!"; exit 121
  fi;;
 -f | --file)
  if [ ! -f "$JSON_SOURCE" ]; then
   echo "File \"$JSON_SOURCE\" does not exist!"; exit 122
  elif [ ! -s "$JSON_SOURCE" ]; then
   echo "File \"$JSON_SOURCE\" is empty!"; exit 123
  fi;;
 --base64)
  if test -z "$JSON_SOURCE"; then
   echo "Source is empty!"; exit 124
  fi;;
 *) echo "Source option \"$JSON_SOURCE_OPTION\" is not supported!"; exit 13;;
esac

VARIABLES=$(($(($# - 2)) / 3))
for ((RELATIVE_INDEX=0; RELATIVE_INDEX<$VARIABLES; RELATIVE_INDEX++)); do
 JSON_QUERY_INDEX=$((2 + $((RELATIVE_INDEX * 3)) + 1))
 JSON_QUERY_OPTION="${!JSON_QUERY_INDEX}"
 if test -z "$JSON_QUERY_OPTION"; then
  echo "Query option is empty!"; exit 101
 fi
 case "$JSON_QUERY_OPTION" in
  -ss) JSON_OPTION="select((.!=null)and(type==\"string\"))";;
  -sfs) JSON_OPTION="select((.!=null)and(type==\"string\")and(.!=\"\"))";;
  -si) JSON_OPTION="select((.!=null)and(type==\"number\"))";;
  -sb) JSON_OPTION="select((.!=null)and(type==\"boolean\"))";;
  -sa) JSON_OPTION="select((.!=null)and(type==\"array\"))";;
  -sfa) JSON_OPTION="select((.!=null)and(type==\"array\")and(.!=[]))";;
  *) echo "Query option \"$JSON_QUERY_OPTION\" is not supported!"; exit 21;;
 esac
 JSON_QUERY_INDEX=$((2 + $((RELATIVE_INDEX * 3)) + 2))
 JSON_QUERY="${!JSON_QUERY_INDEX}"
 if test -z "$JSON_QUERY"; then
  echo "Query is empty!"; exit 102
 fi
 JSON_QUERY_INDEX=$((2 + $((RELATIVE_INDEX * 3)) + 3))
 JSON_VARIABLE="${!JSON_QUERY_INDEX}"
 if test -z "$JSON_VARIABLE"; then
  echo "Variable is empty!"; exit 103
 fi
 JSON_CODE=0
 case "$JSON_SOURCE_OPTION" in
  -j | --json)
   JSON_RESULT="$(echo "$JSON_SOURCE" | jq -Mcer "${JSON_QUERY}|$JSON_OPTION")"
   JSON_CODE=$?;;
  -f | --file)
   JSON_RESULT="$(jq -Mcer "${JSON_QUERY}|$JSON_OPTION" $JSON_SOURCE)"
   JSON_CODE=$?;;
  --base64)
   DECODED="$(echo "$JSON_SOURCE" | base64 -d)"; CODE=$?
   if test $CODE -ne 0; then
    echo "Decode base64 error!"; exit 23; fi
   JSON_RESULT="$(echo "$DECODED" | jq -Mcer "${JSON_QUERY}|$JSON_OPTION")"
   JSON_CODE=$?;;
  *) echo "Source option \"$JSON_SOURCE_OPTION\" is not supported!"; exit 22;;
 esac
 if test "$JSON_QUERY_OPTION" == '-sb'; then
  if test $JSON_CODE -eq 0; then
   if test "$JSON_RESULT" != 'true'; then
    echo "Unexpected boolean value \"$JSON_RESULT\"!"; exit 31
   fi
  elif test $JSON_CODE -eq 1; then
   if test "$JSON_RESULT" != 'false'; then
    echo "Unexpected boolean value \"$JSON_RESULT\"!"; exit 32
   fi
   JSON_CODE=0
  fi
 fi
 if test $JSON_CODE -ne 0; then
  echo "Query option: \"$JSON_QUERY_OPTION\""
  echo "Query: \"$JSON_QUERY\""
  echo "Variable: \"$JSON_VARIABLE\""
  case "$JSON_SOURCE_OPTION" in
   -j | --json) echo "Parse json error! Source: $JSON_SOURCE"; exit 41;;
   -f | --file) echo "Parse \"$JSON_SOURCE\" error!"; exit 42;;
   --base64) echo "Parse base64 json error!"; exit 43;;
   *) echo "Source option \"$JSON_SOURCE_OPTION\" is not supported!"; exit 49;;
  esac
 fi
 printf -v "$JSON_VARIABLE" '%s' "$JSON_RESULT"
 if test $? -ne 0; then
  echo "Set value error!"; exit 104
 fi
done
